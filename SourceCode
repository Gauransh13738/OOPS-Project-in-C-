#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <map>

using namespace std;

// Forward declaration of the Employee class for friend function
class Employee;

// Friend function declaration
double calculateBonus(const Employee& emp);

class Employee {
protected:
    string name;
    int employeeID;
    string department;
    double salary;

public:
    // Constructor to initialize Employee details
    Employee(string name, int employeeID, string department, double salary) 
        : name(name), employeeID(employeeID), department(department), salary(salary) {}

    // Virtual function to display employee details
    virtual void displayDetails() const {
        cout << "\nEmployee Details: " << endl;
        cout << "Name: " << name << endl;
        cout << "Employee ID: " << employeeID << endl;
        cout << "Department: " << department << endl;
        cout << "Salary: $" << salary << endl;
    }

    // Getter functions for employee data
    string getName() const { return name; }
    int getEmployeeID() const { return employeeID; }
    string getDepartment() const { return department; }
    double getSalary() const { return salary; }

    // Friend function to calculate bonus (bonus is 10% of salary)
    friend double calculateBonus(const Employee& emp);

    // Destructor
    virtual ~Employee() {}
};

// Derived class - Manager
class Manager : public Employee {
private:
    string project;

public:
    // Constructor to initialize Manager details
    Manager(string name, int employeeID, string department, double salary, string project)
        : Employee(name, employeeID, department, salary), project(project) {}

    // Overriding displayDetails function to include project details
    void displayDetails() const override {
        Employee::displayDetails();  // Call base class display function
        cout << "Project: " << project << endl;
    }

    // Getter and setter for project
    string getProject() const { return project; }
    void setProject(string project) { this->project = project; }
};

// Employee Management System class
class EmployeeManagementSystem {
private:
    vector<Employee*> employeeList;

public:
    // Add employee (both regular employees and managers)
    void addEmployee(Employee* emp) {
        employeeList.push_back(emp);
    }

    // Display all employee details
    void displayAllEmployees() const {
        if (employeeList.empty()) {
            cout << "\nNo employees to display!" << endl;
            return;
        }
        
        for (auto& emp : employeeList) {
            emp->displayDetails();
            cout << "----------------------------------" << endl;
        }
    }

    // Update employee details based on Employee ID
    void updateEmployee(int employeeID) {
        for (auto& emp : employeeList) {
            if (emp->getEmployeeID() == employeeID) {
                string newName, newDept;
                double newSalary;
                cout << "\nEnter updated name: ";
                cin >> newName;
                cout << "Enter updated department: ";
                cin >> newDept;
                cout << "Enter updated salary: ";
                cin >> newSalary;

                emp->setName(newName);
                emp->setDepartment(newDept);
                emp->setSalary(newSalary);

                cout << "\nEmployee updated successfully!" << endl;
                return;
            }
        }
        cout << "\nEmployee not found!" << endl;
    }

    // Delete employee by ID
    void deleteEmployee(int employeeID) {
        for (auto it = employeeList.begin(); it != employeeList.end(); ++it) {
            if ((*it)->getEmployeeID() == employeeID) {
                delete *it;  // Free memory
                employeeList.erase(it);
                cout << "\nEmployee deleted successfully!" << endl;
                return;
            }
        }
        cout << "\nEmployee not found!" << endl;
    }

    // Calculate total salary of all employees
    double calculateTotalSalary() const {
        double total = 0;
        for (auto& emp : employeeList) {
            total += emp->getSalary();
        }
        return total;
    }

    // Search employee by name or ID using function templates
    template <typename T>
    Employee* searchEmployee(T searchValue) {
        for (auto& emp : employeeList) {
            if constexpr (is_same<T, string>::value) {
                if (emp->getName() == searchValue) {
                    return emp;
                }
            } else if constexpr (is_same<T, int>::value) {
                if (emp->getEmployeeID() == searchValue) {
                    return emp;
                }
            }
        }
        return nullptr;  // Not found
    }

    // Destructor to clean up dynamically allocated memory
    ~EmployeeManagementSystem() {
        for (auto& emp : employeeList) {
            delete emp;
        }
    }
};

// Friend function to calculate bonus
double calculateBonus(const Employee& emp) {
    return emp.getSalary() * 0.1;  // Example: 10% bonus
}

int main() {
    EmployeeManagementSystem ems;
    int choice;

    do {
        cout << "\nOffice Employee Record Management System" << endl;
        cout << "1. Add Employee" << endl;
        cout << "2. Display All Employees" << endl;
        cout << "3. Update Employee" << endl;
        cout << "4. Delete Employee" << endl;
        cout << "5. Calculate Total Salary" << endl;
        cout << "6. Search Employee by ID or Name" << endl;
        cout << "7. Calculate Bonus for an Employee" << endl;
        cout << "8. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                int type;
                cout << "Enter Employee type (1 for regular, 2 for manager): ";
                cin >> type;

                string name, department, project;
                int id;
                double salary;

                cout << "Enter employee name: ";
                cin >> name;
                cout << "Enter employee ID: ";
                cin >> id;
                cout << "Enter department: ";
                cin >> department;
                cout << "Enter salary: ";
                cin >> salary;

                if (type == 1) {
                    Employee* emp = new Employee(name, id, department, salary);
                    ems.addEmployee(emp);
                } else if (type == 2) {
                    cout << "Enter project name: ";
                    cin >> project;
                    Manager* mgr = new Manager(name, id, department, salary, project);
                    ems.addEmployee(mgr);
                } else {
                    cout << "Invalid type!" << endl;
                }
                break;
            }
            case 2:
                ems.displayAllEmployees();
                break;
            case 3: {
                int id;
                cout << "Enter employee ID to update: ";
                cin >> id;
                ems.updateEmployee(id);
                break;
            }
            case 4: {
                int id;
                cout << "Enter employee ID to delete: ";
                cin >> id;
                ems.deleteEmployee(id);
                break;
            }
            case 5: {
                double totalSalary = ems.calculateTotalSalary();
                cout << "Total salary of all employees: $" << totalSalary << endl;
                break;
            }
            case 6: {
                int id;
                string name;
                cout << "Search by (1) ID or (2) Name: ";
                int searchType;
                cin >> searchType;

                if (searchType == 1) {
                    cout << "Enter employee ID: ";
                    cin >> id;
                    Employee* emp = ems.searchEmployee(id);
                    if (emp) {
                        emp->displayDetails();
                    } else {
                        cout << "Employee not found!" << endl;
                    }
                } else if (searchType == 2) {
                    cout << "Enter employee name: ";
                    cin >> name;
                    Employee* emp = ems.searchEmployee(name);
                    if (emp) {
                        emp->displayDetails();
                    } else {
                        cout << "Employee not found!" << endl;
                    }
                } else {
                    cout << "Invalid choice!" << endl;
                }
                break;
            }
            case 7: {
                int id;
                cout << "Enter employee ID to calculate bonus: ";
                cin >> id;
                Employee* emp = ems.searchEmployee(id);
                if (emp) {
                    double bonus = calculateBonus(*emp);
                    cout << "Bonus for " << emp->getName() << " is: $" << bonus << endl;
                } else {
                    cout << "Employee not found!" << endl;
                }
                break;
            }
            case 8:
                cout << "Exiting the system. Goodbye!" << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 8);

    return 0;
}
